@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix ukiyoue: <https://ukiyoue.example.org/vocab#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

# ============================================================
# Layer 1: Business Context
# ============================================================

# Project Charter - Starting point (no inputs allowed)
ukiyoue:ProjectCharterShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:ProjectCharter ;
  sh:name "Project Charter Constraints" ;
  sh:description "Project Charter is a starting point artifact with no derivedFrom references" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:maxCount 0 ;
    sh:message "Project Charter must not have derivedFrom (it is a starting point)" ;
  ] .

# Roadmap - Derived from Project Charter
ukiyoue:RoadmapShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:Roadmap ;
  sh:name "Roadmap Constraints" ;
  sh:description "Roadmap must be derived from Project Charter" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:class ukiyoue:ProjectCharter ;
    sh:message "Roadmap must be derived from Project Charter" ;
  ] .

# Risk Register - No derivedFrom (uses affectedArtifacts per risk instead)
ukiyoue:RiskRegisterShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:RiskRegister ;
  sh:name "Risk Register Constraints" ;
  sh:description "Risk Register should not have derivedFrom; traceability via individual risk affectedArtifacts (validated by Reference Validator)" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:maxCount 0 ;
    sh:message "Risk Register should not have derivedFrom (use affectedArtifacts in each risk instead)" ;
  ] .
# Note: Individual risk.affectedArtifacts are validated by Reference Validator

# Business Goal - Derived from Project Charter
ukiyoue:BusinessGoalShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:BusinessGoal ;
  sh:name "Business Goal Constraints" ;
  sh:description "Business Goal must be derived from Project Charter and realized by at least one User Story" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:class ukiyoue:ProjectCharter ;
    sh:message "Business Goal must be derived from Project Charter" ;
  ] ;
  # Bidirectional traceability: Business Goal must be realized by at least one User Story
  sh:property [
    sh:path [ sh:inversePath ukiyoue:derivedFrom ] ;
    sh:class ukiyoue:UserStory ;
    sh:minCount 1 ;
    sh:message "Business Goal must be realized by at least one User Story (reverse traceability check)" ;
  ] .

# User Story - Derived from Business Goal
ukiyoue:UserStoryShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:UserStory ;
  sh:name "User Story Constraints" ;
  sh:description "User Story must be derived from Business Goal" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:class ukiyoue:BusinessGoal ;
    sh:message "User Story must be derived from Business Goal" ;
  ] .

# ============================================================
# Layer 2: Requirements & Analysis
# ============================================================

# Use Case - Derived from User Story and/or Business Goal
ukiyoue:UseCaseShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:UseCase ;
  sh:name "Use Case Constraints" ;
  sh:description "Use Case must be derived from User Story and/or Business Goal" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:UserStory ]
      [ sh:class ukiyoue:BusinessGoal ]
    ) ;
    sh:message "Use Case must be derived from User Story or Business Goal" ;
  ] .

# Functional Requirements - Derived from Use Case and/or Business Goal
ukiyoue:FunctionalRequirementsShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:FunctionalRequirements ;
  sh:name "Functional Requirements Constraints" ;
  sh:description "Functional Requirements must be derived from Use Case and/or Business Goal" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:UseCase ]
      [ sh:class ukiyoue:BusinessGoal ]
    ) ;
    sh:message "Functional Requirements must be derived from Use Case or Business Goal" ;
  ] .

# Non-Functional Requirements - Derived from Business Goal and/or User Story
ukiyoue:NonFunctionalRequirementsShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:NonFunctionalRequirements ;
  sh:name "Non-Functional Requirements Constraints" ;
  sh:description "Non-Functional Requirements must be derived from Business Goal and/or User Story" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:BusinessGoal ]
      [ sh:class ukiyoue:UserStory ]
    ) ;
    sh:message "Non-Functional Requirements must be derived from Business Goal or User Story" ;
  ] .

# Data Dictionary - Terms from User Story and/or Use Case
ukiyoue:DataDictionaryShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:DataDictionary ;
  sh:name "Data Dictionary Constraints" ;
  sh:description "Data Dictionary must be derived from User Story and/or Use Case" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:UserStory ]
      [ sh:class ukiyoue:UseCase ]
    ) ;
    sh:message "Data Dictionary must be derived from User Story or Use Case" ;
  ] .

# Conceptual Data Model - Entities from Data Dictionary and/or Use Case
ukiyoue:ConceptualDataModelShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:ConceptualDataModel ;
  sh:name "Conceptual Data Model Constraints" ;
  sh:description "Conceptual Data Model must be derived from Data Dictionary and/or Use Case" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:DataDictionary ]
      [ sh:class ukiyoue:UseCase ]
    ) ;
    sh:message "Conceptual Data Model must be derived from Data Dictionary or Use Case" ;
  ] .

# Test Strategy - Derived from Functional Requirements and/or Non-Functional Requirements
ukiyoue:TestStrategyShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:TestStrategy ;
  sh:name "Test Strategy Constraints" ;
  sh:description "Test Strategy must be derived from Functional and/or Non-Functional Requirements" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:FunctionalRequirements ]
      [ sh:class ukiyoue:NonFunctionalRequirements ]
    ) ;
    sh:message "Test Strategy must be derived from Functional or Non-Functional Requirements" ;
  ] .

# ============================================================
# Layer 3: Architecture & Design
# ============================================================

# Architecture Decision Record - No derivedFrom (uses impact and relatedDecisions instead)
ukiyoue:ArchitectureDecisionRecordShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:ArchitectureDecisionRecord ;
  sh:name "ADR Constraints" ;
  sh:description "ADR should not have derivedFrom; use impact and relatedDecisions fields instead (validated by Reference Validator)" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:maxCount 0 ;
    sh:message "ADR should not have derivedFrom (use impact and relatedDecisions instead)" ;
  ] .
# Note: ADR.relatedDecisions are validated by Reference Validator

# System Architecture - Derived from FR, NFR, and/or ADR
ukiyoue:SystemArchitectureShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:SystemArchitecture ;
  sh:name "System Architecture Constraints" ;
  sh:description "System Architecture must be derived from FR, NFR, and/or ADR" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:FunctionalRequirements ]
      [ sh:class ukiyoue:NonFunctionalRequirements ]
      [ sh:class ukiyoue:ArchitectureDecisionRecord ]
    ) ;
    sh:message "System Architecture must be derived from FR, NFR, or ADR" ;
  ] .

# API Specification - Derived from Functional Requirements and/or System Architecture
ukiyoue:APISpecificationShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:APISpecification ;
  sh:name "API Specification Constraints" ;
  sh:description "API Specification must be derived from FR and/or System Architecture" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:FunctionalRequirements ]
      [ sh:class ukiyoue:SystemArchitecture ]
    ) ;
    sh:message "API Specification must be derived from Functional Requirements or System Architecture" ;
  ] .

# Data Model (Logical) - Derived from Conceptual Data Model and/or System Architecture
ukiyoue:DataModelShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:DataModel ;
  sh:name "Data Model Constraints" ;
  sh:description "Data Model (Logical) must be derived from Conceptual Data Model and/or System Architecture" ;
  sh:property [
    sh:path ukiyoue:derivedFrom ;
    sh:minCount 1 ;
    sh:or (
      [ sh:class ukiyoue:ConceptualDataModel ]
      [ sh:class ukiyoue:SystemArchitecture ]
    ) ;
    sh:message "Data Model must be derived from Conceptual Data Model or System Architecture" ;
  ] .

# ============================================================
# Additional Common Constraints
# ============================================================

# All artifacts must have an id
ukiyoue:ArtifactIdShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:Artifact ;
  sh:property [
    sh:path ukiyoue:id ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:datatype xsd:string ;
    sh:pattern "^[a-z0-9-]+$" ;
    sh:message "All artifacts must have a lowercase alphanumeric id" ;
  ] .

# All artifacts must have a title
ukiyoue:ArtifactTitleShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:Artifact ;
  sh:property [
    sh:path ukiyoue:title ;
    sh:minCount 1 ;
    sh:maxCount 1 ;
    sh:datatype xsd:string ;
    sh:minLength 1 ;
    sh:message "All artifacts must have a non-empty title" ;
  ] .

# All artifacts must have a type
ukiyoue:ArtifactTypeShape
  a sh:NodeShape ;
  sh:targetClass ukiyoue:Artifact ;
  sh:property [
    sh:path rdf:type ;
    sh:minCount 1 ;
    sh:message "All artifacts must have a type" ;
  ] .
